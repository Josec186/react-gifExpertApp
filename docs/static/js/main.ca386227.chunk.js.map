{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputVal","SetinputVal","onSubmit","e","preventDefault","console","log","trim","length","cat","type","value","onChange","target","getGif","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAgBC,EAAhB,KAiBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,gBACTN,EAASO,OAAOC,OAAS,IAExBV,GAAc,SAAAW,GAAG,OAAKT,GAAL,mBAAiBS,OAClCR,EAAY,MAMhB,SACI,uBACIS,KAAK,OACLC,MAAOX,EACPY,SApBc,SAACT,GACvBE,QAAQC,IAAIH,EAAEU,OAAOF,OACrBV,EAAYE,EAAEU,OAAOF,a,+BCPhBG,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EAAM,0CAA0CC,UAAUH,GAAW,qDADzD,SAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1CZ,QAAQC,IAAIiB,GAZM,kBAaXA,GAbW,4CAAH,sDCCNO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,sBAAKc,UAAU,uDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAqBrB,ECnBwB,SAACA,GACzB,MAAwBhB,mBAAS,CAC7BuB,KAAM,GACNa,SAAS,IAFb,mBAAMC,EAAN,KAAYC,EAAZ,KAyBA,OAjBAC,qBAAU,WACNxB,EAAOC,GACNwB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAGb,UAIR,CAACpB,IAIGqB,EDPuBM,CAAa3B,GAA/Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAwBnB,OACI,qCACA,6BAAKpB,IAEJoB,GAAW,mBAAGJ,UAAU,qDAAb,wBAEZ,qBAAKA,UAAU,aAAf,SAEIH,EAAOJ,KAAI,SAAAC,GACP,OACI,cAAC,EAAD,eAEQA,GADCA,EAAIC,aErBlBiB,EApCM,WAKjB,MAAmC5C,mBAAS,CAAC,sBAA7C,mBAAO6C,EAAP,KAAkB9C,EAAlB,KAcA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ8C,EAAWpB,KAAI,SAACf,GACZ,OAAO,cAAC,EAAD,CAAmBM,UAAWN,GAAhBA,YC3BzCoC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.ca386227.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategorias}) => {\r\n    const [inputVal,SetinputVal] = useState(''); //Si no damos un string vacio nos da error de 'undefined'\r\n    \r\n    const handleInputChange = (e) => {\r\n        console.log(e.target.value);\r\n        SetinputVal(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log('Submit hecho');\r\n        if(inputVal.trim().length > 2){\r\n            //setCategorias en Callback el primer argumento es el valor anterior\r\n            setCategorias(cat => [inputVal,...cat,]);\r\n            SetinputVal('');\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputVal}    \r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias : PropTypes.func.isRequired,\r\n}\r\n","\r\nexport const getGif = async(categoria) => {\r\n    const url = 'https://api.giphy.com/v1/gifs/search?q='+encodeURI(categoria)+'&limit=10&api_key=ddkG6U6Jpk9p2l9FvzeAo9BwjZVHvUUP';\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id : img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n    return(\r\n        <div className=\"card animate__animated animate__fadeIn animate__fast\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n\r\n};","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n//import { getGif } from \"../helpers/getGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({categoria}) => {\r\n    \r\n    //Este código hace que solo se renderice la función \r\n    //getGif() cuando se renderiza todo por primera vez\r\n    //o cambia \"categoria\". En este caso NO CAMBIA EL PARAMETRO \"categoria\" pero si puede cambiar el valor de este \r\n     /* \r\n    useEffect(() => {\r\n        getGif(categoria)\r\n        .then(imgs => setImages(imgs));\r\n    }, [categoria]);\r\n\r\n    const [images,setImages] = useState([]);\r\n    */\r\n\r\n    /*\r\n    Con lo que tenemos actualmente podemos moverlo a un\r\n    Custom Hook. Este hará que cuando cargue el componente\r\n    se manda a llamar el fetch y dirá que está cargando\r\n    Cuando termine todo que se muestre\r\n    */\r\n    //Usando ahora CustomHooks\r\n    const {data:images,loading} = useFetchGifs(categoria);\r\n\r\n\r\n    /* \r\n    Este código lo pasamos a /helpers/getGifs\r\n    ya que esta función no necesita estar aquí,\r\n    de esta manera hacemos todo más por componenetes\r\n    const getGif = async() => {\r\n        const url = 'https://api.giphy.com/v1/gifs/search?q='+encodeURI(categoria)+'&limit=10&api_key=ddkG6U6Jpk9p2l9FvzeAo9BwjZVHvUUP';\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id : img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        });\r\n        console.log(gifs);\r\n        setImages(gifs);\r\n    }\r\n    */\r\n\r\n    return (\r\n        <>\r\n        <h3>{categoria}</h3>\r\n        \r\n        {loading && <p className=\"animate__animated animate__fadeIn animate_delay_1s\">loading...</p>}\r\n        \r\n        <div className=\"card-grid \">\r\n        {\r\n            images.map(img => {\r\n                return(\r\n                    <GifGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n        \r\n        </>\r\n    );\r\n\r\n};","//NO importaremos React ya que no \r\n//Devolvemos JSX \r\n\r\nimport {useEffect, useState} from 'react';\r\nimport {getGif} from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n    const[state,setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //CustomHooks también tienen efectos. En este caso lo llamaremos\r\n    //Ya que solo queremos que se dispare si la categoría cambia\r\n    //Aquí es donde cambie el cuerpo mandará a renderizar\r\n    useEffect(() => {\r\n        getGif(categoria)\r\n        .then(imgs => {\r\n            setTimeout(() => {\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false,\r\n                });\r\n\r\n            }, 500)\r\n\r\n\r\n        });\r\n    }, [categoria]);\r\n\r\n   \r\n\r\n    return state; // \r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\r\n//const categorias = ['Metal Gear', 'Clone Wars', 'Bioshock Infinite'];\r\n//Como categorias es constante y necesitamos cambiarlo, mejor\r\n//Nos traemos este dato como Hooks y usamos un useState\r\n    const [categorias,setCategorias] = useState(['Bioshock Infinite']);\r\n\r\n    //Esto es solo un ejemplo de como agregar más elm a un Arr de useState\r\n    const handleAddExample = () => {\r\n        const add = 'Red Dead Redemption';\r\n        //categorias.push(add);\r\n        //mandarle el nuevo categorías no renderiza bien por alguna razón\r\n        //Es mejor hacerlo así...\r\n        \r\n        setCategorias([add,...categorias]);\r\n        //Otra forma de traerlo es con callback\r\n        //setCategorias(cats => [...categorias,add]);\r\n    };\r\n\r\n    return(\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategorias={setCategorias}/>\r\n        <hr />\r\n\r\n        <ol>\r\n            { \r\n                categorias.map((cat) => {\r\n                    return <GifGrid key={cat} categoria={cat}/>\r\n                })\r\n            }\r\n        </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}